{"version":3,"sources":["Components/ContactList/ContactList.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","index.js","Components/ContactForm/ContactForm.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","filterContacts","items","createReducer","_","payload","state","filter","id","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","contactsReducer","devTools","process","axios","defaults","baseURL","dispatch","a","get","data","contact","post","contactId","delete","getAllContacts","getFilter","getLoading","getVisibleContacts","createSelector","normFilter","toLowerCase","name","includes","ContactForm","number","handleChange","e","target","value","setState","handleSubmit","ev","preventDefault","props","find","item","alert","onSubmit","resetForm","this","className","s","form","label","input","type","onChange","placeholder","btnAdd","Component","connect","contactsSelectors","contactsOperations","ContactList","fetchContacts","onDeleteContact","isLaodingContacts","laoding","map","btn","onClick","filterValue","onChangeFilter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d094ef28.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactList_contact__13Zhi\",\"btn\":\"ContactList_btn__2-BFr\",\"laoding\":\"ContactList_laoding__3Apka\"};","\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\"contacts/fetchContactsRequest\");\r\nexport const fetchContactsSuccess = createAction(\"contacts/fetchContactsSuccess\");\r\nexport const fetchContactsError = createAction(\"contacts/fetchContactsError\");\r\n\r\n\r\nexport const addContactsRequest = createAction('contacts/addContactsRequest');\r\nexport const addContactsSuccess = createAction('contacts/addContactsSuccess');\r\nexport const addContactsError = createAction('contacts/addContactsError');\r\n\r\n\r\nexport const deleteContactsRequest = createAction('contacts/deleteContactsRequest');\r\nexport const deleteContactsSuccess = createAction('contacts/deleteContactsSuccess');\r\nexport const deleteContactsError = createAction('contacts/deleteContactsError');\r\n\r\nexport const filterContacts = createAction('contacts/filterContacts');\r\n\r\n","\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux'\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactsRequest,\r\n    addContactsSuccess,\r\n    addContactsError,\r\n    deleteContactsRequest,\r\n    deleteContactsSuccess,\r\n    deleteContactsError,\r\n    filterContacts,\r\n  \r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSuccess]: (_, { payload }) => payload,\r\n    [addContactsSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactsSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\n// только на Request ставим true\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true, \r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactsRequest]: () => true,\r\n  [addContactsSuccess]: () => false,\r\n  [addContactsError]: () => false,\r\n  [deleteContactsRequest]: () => true,\r\n  [deleteContactsSuccess]: () => false,\r\n  [deleteContactsError]: () => false,\r\n});\r\n\r\nexport default combineReducers({ items, filter, loading});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n// import storage from \"redux-persist/lib/storage\";\r\n\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\n// удаляем persistStore\r\n\r\n// const contactsPersistConfig = {\r\n//   key: \"contacts\",\r\n//   storage,\r\n//   blacklist: [\"filter\"],\r\n// };\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions:\r\n        [FLUSH,\r\n          REHYDRATE,\r\n          PAUSE,\r\n          PERSIST,\r\n          PURGE,\r\n          REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n// const persistor = persistStore(store);\r\n\r\n\r\n\r\nexport default  store;\r\n","\r\n\r\nimport axios from \"axios\";\r\nimport {\r\n   fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactsRequest,\r\n    addContactsSuccess,\r\n    addContactsError,\r\n    deleteContactsRequest,\r\n    deleteContactsSuccess,\r\n    deleteContactsError,\r\n} from \"./contacts-actions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n   // axios\r\n  //   .get(\"/contacts\")\r\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n  //   .catch((error) => dispatch(fetchContactsError(error)));\r\n};\r\n\r\n\r\n\r\n// const addContacts = ({ name, number }) => async (dispatch) => {\r\n//   const contact = {\r\n//     name,\r\n//     number,\r\n//   };\r\nconst addContacts = contact => async (dispatch) => {\r\n  dispatch(addContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post(\"/contacts\", contact);\r\n    dispatch(addContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactsError(error));\r\n  }\r\n   // axios\r\n  //   .post(\"/contacts\", contact)\r\n  //   .then(({ data }) => dispatch(addContactSuccess(data)))\r\n  //   .catch((error) => dispatch(addContactError(error)));\r\n};\r\n\r\n \r\n  const deleteContacts = (contactId) => async (dispatch) => {\r\n    dispatch(deleteContactsRequest());\r\n\r\n    try {\r\n      await axios.delete(`/contacts/${contactId}`);\r\n      dispatch(deleteContactsSuccess(contactId));\r\n    } catch (error) {\r\n      dispatch(deleteContactsError(error));\r\n    }\r\n    // axios\r\n  //   .delete(`/contacts/${contactId}`)\r\n  //   .then(() => dispatch(deleteContactSuccess(contactId)))\r\n  //   .catch((error) => dispatch(deleteContactError(error)));\r\n  };\r\n\r\n \r\n  // eslint-disable-next-line import/no-anonymous-default-export\r\n  export default { fetchContacts, addContacts, deleteContacts };","import { createSelector } from \"reselect\";\r\n\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getAllContacts = (state) => state.contacts.items;\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\n\r\n\r\n// мемоизация\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normFilter = filter.toLowerCase();\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normFilter)\r\n    );\r\n  }\r\n);\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    getLoading,\r\n    getAllContacts,\r\n    getFilter,\r\n    getVisibleContacts\r\n};\r\n","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\nimport s from './ContactForm.module.css'\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: \"\",\r\n        number: \"\",\r\n  };\r\n     // записывает данные \r\n    handleChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n    };\r\n   // отправляет данные \r\n  handleSubmit = (ev) => {\r\n    ev.preventDefault();\r\n    const { name } = this.state;\r\n    const { contacts } = this.props;\r\n\r\n    const uniqueContact = contacts.find(\r\n      (item) => item.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n    if (uniqueContact) {\r\n      alert(`${name} уже есть в списке ваших контактов`);\r\n      return;\r\n    }\r\n\r\n    this.props.onSubmit(this.state);\r\n    this.resetForm();\r\n    };\r\n     // очищает форму после отправки\r\n  resetForm = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n    render() {\r\n        const { name, number } = this.state;\r\n        return (\r\n            <form className={s.form} onSubmit={this.handleSubmit}>\r\n                <label className={s.label}>\r\n                    Name\r\n                     <input className={s.input} \r\n                     type=\"text\"\r\n                        name=\"name\"\r\n                        value={name}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Name\"\r\n                       \r\n                    />\r\n                </label>\r\n                <label className={s.label} >\r\n                    Number\r\n          <input className={s.input}\r\n                        type=\"text\"\r\n                        name=\"number\"\r\n                        value={number}\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"000-00-00\"\r\n                      \r\n                    />\r\n                </label>\r\n                <button className={s.btnAdd} type=\"submit\">\r\n                    Add contact\r\n        </button>\r\n                \r\n            </form>\r\n            \r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (contact) => dispatch(contactsOperations.addContacts(contact)),\r\n});\r\n    \r\nexport default connect(mapStateToProps,mapDispatchToProps) (ContactForm);","import { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\nimport s from './ContactList.module.css'\r\n\r\nclass ContactList extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n  render() {\r\n    const { contacts, onDeleteContact, isLaodingContacts } = this.props;\r\n  return (\r\n    <>\r\n       {isLaodingContacts && <h1 className={s.laoding}>Загружаем....</h1>}\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className={s.contact} key={id}>\r\n              <p>{name}: </p>\r\n              <p>{number}</p>\r\n          <button className={s.btn}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n      </ul>\r\n      </>\r\n  );\r\n}\r\n    }\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n// const filterContacts = (allContacts, filter) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return allContacts.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// };\r\n\r\nconst { getLoading, getVisibleContacts } = contactsSelectors;\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLaodingContacts: getLoading(state),\r\n  contacts: getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactsOperations.deleteContacts(id)),\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n    \r\nexport default connect(mapStateToProps,mapDispatchToProps) (ContactList);","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types';\r\nimport s from '../ContactForm/ContactForm.module.css'\r\nimport { filterContacts } from '../../redux/contacts/contacts-actions';\r\n\r\n\r\nconst Filter = ({ filterValue, onChangeFilter }) => {\r\n  return (\r\n    <label className={s.label}>\r\n      Search for contacts by name\r\n      <input  className={s.input}\r\n        type=\"text\"\r\n        value={filterValue}\r\n        onChange={onChangeFilter}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  filterValue: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filterValue: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChangeFilter: (ev) => dispatch(filterContacts(ev.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from \"react\";\nimport ContactForm from './Components/ContactForm/ContactForm'\nimport ContactList from './Components/ContactList/ContactList';\nimport Filter from './Components/Filter/Filter'\n\n\nimport './App.css';\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1> Phonebook task #6</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n  \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\n// import { PersistGate } from 'redux-persist/es/integration/react'\n\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n         <Provider store={store}>\n      {/* <PersistGate persistor={store.persistor}> */}\n         <BrowserRouter>\n          <App />\n          </BrowserRouter>\n        {/* </PersistGate> */}\n      </Provider>\n      </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1L36A\",\"input\":\"ContactForm_input__3hX7i\",\"btnAdd\":\"ContactForm_btnAdd__2X4B1\",\"label\":\"ContactForm_label__24fvx\"};"],"sourceRoot":""}